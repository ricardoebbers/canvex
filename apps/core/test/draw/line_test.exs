defmodule Core.Draw.LineTest do
  use ExUnit.Case

  alias Core.Canvas
  alias Core.Draw.Line

  setup do
    canvas = Canvas.new(%{width: 10, height: 10}, '.')
    %{canvas: canvas}
  end

  describe "vertical/4" do
    test "should draw a vertical line", %{canvas: canvas} do
      starting_coordinates = %{x: 1, y: 1}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
             ] == Line.vertical(canvas, starting_coordinates, 7, '#') |> Canvas.matrix()
    end

    test "should draw backwards given negative size", %{canvas: canvas} do
      starting_coordinates = %{x: 8, y: 9}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.']
             ] == Line.vertical(canvas, starting_coordinates, -5, '#') |> Canvas.matrix()
    end

    test "should not draw past canvas boundaries", %{canvas: canvas} do
      starting_coordinates = %{x: 3, y: 8}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '#', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '#', '.', '.', '.', '.', '.', '.']
             ] == Line.vertical(canvas, starting_coordinates, 7, '#') |> Canvas.matrix()
    end

    test "should not draw non-ascii printable chars", %{canvas: canvas} do
      starting_coordinates = %{x: 3, y: 8}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
             ] == Line.vertical(canvas, starting_coordinates, 7, 'Ã±') |> Canvas.matrix()
    end
  end

  describe "horizontal/4" do
    test "should draw a horizontal line", %{canvas: canvas} do
      starting_coordinates = %{x: 1, y: 1}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '#', '#', '#', '#', '#', '#', '#', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
             ] == Line.horizontal(canvas, starting_coordinates, 7, '#') |> Canvas.matrix()
    end

    test "should draw backwards given negative size", %{canvas: canvas} do
      starting_coordinates = %{x: 8, y: 9}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '#', '#', '#', '#', '#', '.']
             ] == Line.horizontal(canvas, starting_coordinates, -5, '#') |> Canvas.matrix()
    end

    test "should not draw past canvas boundaries", %{canvas: canvas} do
      starting_coordinates = %{x: 8, y: 8}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
             ] == Line.horizontal(canvas, starting_coordinates, 7, '#') |> Canvas.matrix()
    end

    test "should not draw non-ascii printable chars", %{canvas: canvas} do
      starting_coordinates = %{x: 3, y: 3}

      assert [
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
               ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
             ] == Line.horizontal(canvas, starting_coordinates, 7, 'Ã±') |> Canvas.matrix()
    end
  end
end
